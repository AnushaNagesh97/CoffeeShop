<!-- Remove from Cart
qty change -->
<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cart - Coffee Shop</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <%- include('nav.ejs'); %>
    <div class="container cart-container my-5">
        <h2 class="text-center mb-4">Your Cart</h2>
        <div class="container">
            <h1>Active User Carts</h1>
            <div class="cart-items" id="cartItems">
                <!-- Active user carts will be displayed here -->
            </div>
        </div>

        <div class="cart-total mb-3">
            <h4>Total: $<span id="totalPrice">XXX.XX</span></h4>
        </div>

        <form action="/cart/checkout" method="post" class="user-info-form">
            <h3 class="mb-3">Shipping Information</h3>
            <div class="row">
                <div class="col-md-6 mb-3" hidden>
                    <label for="customer_id" class="form-label">ID</label>
                    <input type="text" class="form-control" id="customer_id" name="customer_id" readonly value="<%= userDetails.customer_id %>">
                </div>
                <div class="col-md-6 mb-3">
                    <label for="email" class="form-label">Email</label>
                    <input type="email" class="form-control" id="email" name="email" readonly value="<%= userDetails.email %>">
                </div>
                <div class="col-md-6 mb-3">
                    <label for="wallet_balance" class="form-label">Wallet Balance</label>
                    <input type="text" class="form-control" id="wallet_balance" name="wallet_balance" readonly value="$<%= userDetails.wallet_balance %>">
                </div>
                <div class="col-md-6 mb-3">
                    <label for="customer_name" class="form-label">Name</label>
                    <input type="text" class="form-control" id="customer_name" name="customer_name" value="<%= userDetails.customer_name %>">
                </div>
                <div class="col-md-6 mb-3">
                    <label for="address" class="form-label">Address</label>
                    <input type="text" class="form-control" id="address" name="address" value="<%= userDetails.address %>">
                </div>
                <div class="col-md-6 mb-3">
                    <label for="phone_number" class="form-label">Phone Number</label>
                    <input type="tel" class="form-control" id="phone_number" name="phone_number" value="<%= userDetails.phone_number %>">
                </div>
            </div>

            <button type="submit" id="checkoutBtn" class="btn btn-primary">Checkout</button>
        </form>
    </div>

    <footer class="bg-brown text-white text-center py-3">
        <p>&copy; 2023 [name]. All Rights Reserved.</p>
        <div class="social-icons">
            <a href="your_facebook_link" class="bi bi-facebook"></a>
            <a href="your_twitter_link" class="bi bi-twitter"></a>
            <a href="your_instagram_link" class="bi bi-instagram"></a>
            <!-- Add other social media links as needed -->
        </div>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', async () => {
            const userId = document.getElementById("customer_id").value;
            let totalPrice = 0;
            try {
                const response = await fetch(`/api/carts/active/${userId}`);
                if (!response.ok) {
                    throw new Error('Network response was not ok for fetching carts');
                }
                const carts = await response.json();
                console.log('Carts:', carts);

                const cartItemsContainer = document.getElementById('cartItems');
                for (const cart of carts) {
                    const cartDiv = document.createElement('div');
                    console.log("Hello");
                    cartDiv.className = 'row mb-3';
                    var productResponse = await fetch(`/api/products/${cart.product_id}`);
                    if (!productResponse.ok) {
                        throw new Error('Network response was not ok for fetching products');
                    }
                    var product = await productResponse.json();
                    product = product[0];
                    cartDiv.innerHTML = `
                        <div class="col-md-2">
                            <img src="${product.image_path}" alt="Product Image" class="img-fluid">
                        </div>
                        <div class="col-md-4">
                            <h5>Product ID: ${cart.product_id}</h5>
                            <p>Name: ${product.product_name}</p>
                            <p>Quantity: ${cart.quantity}</p>
                            <!-- <p class="cart-id-store" hidden>${cart.cart_id}</p> -->
                            <button class="btn btn-success incrementBtn" data-cart-id="${cart.cart_id}">Increment</button>
                            <button class="btn btn-danger deleteBtn" data-cart-id="${cart.cart_id}">Delete</button>
                        </div>
                    `;
                    cartItemsContainer.appendChild(cartDiv);
                }
                calculateTotalPrice();

                // Event listeners for increment and delete buttons
                document.querySelectorAll('.incrementBtn').forEach(button => {
                    console.log('Incrementing the quantity');
                    button.addEventListener('click', async () => {
                        const cartId = event.currentTarget.getAttribute('data-cart-id');
                        //console.log('fetchign cart-id to increment the quantity', cartId);
                        await handleIncrement(userId, cartId);
                        const quantityParagraph = button.parentNode.querySelector('p');
                        const currentQuantity = parseInt(quantityParagraph.textContent.split(': ')[1], 10);
                        const updatedQuantity = currentQuantity + 1;
                        quantityParagraph.textContent = `Quantity: ${updatedQuantity}`;
                        
                        //const productId = button.parentNode.querySelector('h5');
                        //const productPrice = await fetchProductPrice(productId);
                        calculateTotalPrice();
                    });
                });

                document.querySelectorAll('.deleteBtn').forEach(button => {
                    button.addEventListener('click', async () => {
                        const cartId = button.getAttribute('data-cart-id');
                        await handleDelete(cartId);
                        calculateTotalPrice();
                    });
                });
            } catch (error) {
                console.error('Error fetching or processing carts:', error);
            }
        });

        async function handleIncrement(userId, cartId) {
            try {
                console.log('API call to increment the quantity', userId, cartId);
        
                const requestData = {
                    userId: userId,
                    cart_id: cartId // Assuming this is the cart_id to be passed in req.body
                };
        
                const response = await fetch(`/api/carts/${cartId}`, {
                    method: 'POST', // Change the method to GET or appropriate method for your server
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(requestData)
                });
        
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                // Update cart quantity
                console.log(`Incremented quantity for cart ID ${cartId}`);
                //Update Total Amount
                //totalPrice += productPrice;
                //document.getElementById('totalPrice').textContent = totalPrice.toFixed(2);
            } catch (error) {
                console.error('Error incrementing quantity:', error);
            }
        }

        async function fetchProductPrice(productId) {
            try {
                //console.log('Fetching price of product:', productId);
                const response = await fetch(`/api/products/${productId}`);
                if (!response.ok) {
                    throw new Error('Failed to fetch product price');
                }
                const product = await response.json();
                //console.log('Fetched product:', product);
                if (Array.isArray(product) && product.length > 0) {
                    const fetchedProduct = product[0];
                    console.log('Product price:', fetchedProduct.price);
        
                    // Access the price property of the fetched product object
                    return fetchedProduct.price;
                } else {
                    throw new Error('Product not found or invalid response');
                }
            } catch (error) {
                console.error('Error fetching product price:', error);
                return 0; // Return 0 in case of error
            }
        }

        // Calculate total price function
    function calculateTotalPrice() {
        const cartItems = document.querySelectorAll('.row.mb-3');
        totalPrice = 0;

        cartItems.forEach(cart => {
            const productId = cart.querySelector('h5').textContent.split(': ')[1];
            const quantity = parseInt(cart.querySelector('p').textContent.split(': ')[1], 10);

            fetchProductPrice(productId)
                .then(productPrice => {
                    totalPrice += productPrice * quantity;
                    document.getElementById('totalPrice').textContent = totalPrice.toFixed(2);
                })
                .catch(error => {
                    console.error('Error fetching product price:', error);
                });
        });
    }
    
    function calculateTotalQuantity() {
        const cartItems = document.querySelectorAll('.row.mb-3');
        let totalQuantity = 0;

        cartItems.forEach(cart => {
            const quantity = parseInt(cart.querySelector('p').textContent.split(': ')[1], 10);
            totalQuantity += quantity;
            console.log('Total items in cart:', totalQuantity);
        });

        return totalQuantity;
    }

        async function handleDelete(cartId) {
            try {
                const response = await fetch(`/api/carts/${cartId}`, {
                    method: 'DELETE'
                });
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                // Remove cart item from display
                console.log(`Deleted cart with ID ${cartId}`);
            } catch (error) {
                console.error('Error deleting cart:', error);
            }
        }

        document.getElementById('checkoutBtn').addEventListener('click', async (event) => {
            console.log('Attempting checkout');
            event.preventDefault();
            const walletBalance = parseFloat(document.getElementById('wallet-balance').value.replace('$', ''));
            const total = parseFloat(document.getElementById('totalPrice').textContent);
    
            if (total > walletBalance) {
                // Display error message for insufficient balance
                alert('Insufficient balance. Please add funds to your wallet.');
            } else {
                try {
                    console.log('Sufficient wallet balance');
                    const userId = 2; // TODO: Replace with actual user ID
                    const totalPrice = parseFloat(document.getElementById('totalPrice').textContent);
                    const totalQuantity = calculateTotalQuantity(); // Define a function to calculate total quantity

                    const today = new Date();
                    const formattedDate = today.toISOString().split('T')[0]; // Get today's date in YYYY-MM-DD format

                    const orderData = {
                        customer_id: userId,
                        order_date: formattedDate,
                        total_price: totalPrice,
                        quantity: totalQuantity
                    };

                    const response = await fetch(`/api/orders/bycustomer`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(orderData)
                    });
    
                    if (!response.ok) {
                        throw new Error('Failed to create order');
                    }
                    const newOrder = await response.json();
                    console.log('New order created!:', newOrder[0]);

                    // Mark all carts as inactive
                    const cartItems = document.querySelectorAll('.row.mb-3');
                    cartItems.forEach(async (cart) => {
                        console.log('Marking inactive');
                        const cartId = cart.querySelector('.deleteBtn').getAttribute('data-cart-id');
                        //await markCartAsInactive(cartId);
                        await handleDelete(cartId);
                    });

                    // Subtract total amount from wallet balance
                    const updatedWalletBalance = walletBalance - totalPrice;
                    document.getElementById('wallet-balance').value = `$${updatedWalletBalance.toFixed(2)}`;


                    const orderID = newOrder[0];
                    console.log('Sending order ID for rendering:', orderID);
                    // Order created successfully, render the 'order.ejs' template
                    window.location.href = `/order?orderId=${orderID}`; // Change the URL as needed
                } catch (error) {
                    console.error('Error creating order:', error);
                    // Handle error scenario here
                }
            }
        });

        // Function to mark cart as inactive
        async function markCartAsInactive(cartId) {
            try {
                console.log('Marking ordered cart as inactive:', cartId);
                const response = await fetch(`/api/carts/${cartId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ cartId: cartId }) // Pass the cartId as needed
                });
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                console.log(`Cart with ID ${cartId} marked as inactive`);
            } catch (error) {
                console.error('Error marking cart as inactive:', error);
                // Handle error scenario here
            }
        }

    </script>
</body>

</html>
